/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_SPARC64_GENERATED_TRACERS_H
#define TRACE_HW_SPARC64_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_EBUS_ISA_IRQ_HANDLER_EVENT;
extern TraceEvent _TRACE_SUN4U_IOMMU_MEM_READ_EVENT;
extern TraceEvent _TRACE_SUN4U_IOMMU_MEM_WRITE_EVENT;
extern TraceEvent _TRACE_SUN4U_IOMMU_TRANSLATE_EVENT;
extern TraceEvent _TRACE_SPARC64_CPU_CHECK_IRQS_RESET_IRQ_EVENT;
extern TraceEvent _TRACE_SPARC64_CPU_CHECK_IRQS_NOSET_IRQ_EVENT;
extern TraceEvent _TRACE_SPARC64_CPU_CHECK_IRQS_SET_IRQ_EVENT;
extern TraceEvent _TRACE_SPARC64_CPU_CHECK_IRQS_DISABLED_EVENT;
extern TraceEvent _TRACE_SPARC64_CPU_IVEC_RAISE_IRQ_EVENT;
extern TraceEvent _TRACE_SPARC64_CPU_IVEC_LOWER_IRQ_EVENT;
extern TraceEvent _TRACE_SPARC64_CPU_TICK_IRQ_DISABLED_EVENT;
extern TraceEvent _TRACE_SPARC64_CPU_TICK_IRQ_FIRE_EVENT;
extern TraceEvent _TRACE_SPARC64_CPU_STICK_IRQ_DISABLED_EVENT;
extern TraceEvent _TRACE_SPARC64_CPU_STICK_IRQ_FIRE_EVENT;
extern TraceEvent _TRACE_SPARC64_CPU_HSTICK_IRQ_DISABLED_EVENT;
extern TraceEvent _TRACE_SPARC64_CPU_HSTICK_IRQ_FIRE_EVENT;
extern TraceEvent _TRACE_SPARC64_CPU_TICK_SET_COUNT_EVENT;
extern TraceEvent _TRACE_SPARC64_CPU_TICK_GET_COUNT_EVENT;
extern TraceEvent _TRACE_SPARC64_CPU_TICK_SET_LIMIT_EVENT;
extern TraceEvent _TRACE_SPARC64_CPU_TICK_SET_LIMIT_ZERO_EVENT;
extern uint16_t _TRACE_EBUS_ISA_IRQ_HANDLER_DSTATE;
extern uint16_t _TRACE_SUN4U_IOMMU_MEM_READ_DSTATE;
extern uint16_t _TRACE_SUN4U_IOMMU_MEM_WRITE_DSTATE;
extern uint16_t _TRACE_SUN4U_IOMMU_TRANSLATE_DSTATE;
extern uint16_t _TRACE_SPARC64_CPU_CHECK_IRQS_RESET_IRQ_DSTATE;
extern uint16_t _TRACE_SPARC64_CPU_CHECK_IRQS_NOSET_IRQ_DSTATE;
extern uint16_t _TRACE_SPARC64_CPU_CHECK_IRQS_SET_IRQ_DSTATE;
extern uint16_t _TRACE_SPARC64_CPU_CHECK_IRQS_DISABLED_DSTATE;
extern uint16_t _TRACE_SPARC64_CPU_IVEC_RAISE_IRQ_DSTATE;
extern uint16_t _TRACE_SPARC64_CPU_IVEC_LOWER_IRQ_DSTATE;
extern uint16_t _TRACE_SPARC64_CPU_TICK_IRQ_DISABLED_DSTATE;
extern uint16_t _TRACE_SPARC64_CPU_TICK_IRQ_FIRE_DSTATE;
extern uint16_t _TRACE_SPARC64_CPU_STICK_IRQ_DISABLED_DSTATE;
extern uint16_t _TRACE_SPARC64_CPU_STICK_IRQ_FIRE_DSTATE;
extern uint16_t _TRACE_SPARC64_CPU_HSTICK_IRQ_DISABLED_DSTATE;
extern uint16_t _TRACE_SPARC64_CPU_HSTICK_IRQ_FIRE_DSTATE;
extern uint16_t _TRACE_SPARC64_CPU_TICK_SET_COUNT_DSTATE;
extern uint16_t _TRACE_SPARC64_CPU_TICK_GET_COUNT_DSTATE;
extern uint16_t _TRACE_SPARC64_CPU_TICK_SET_LIMIT_DSTATE;
extern uint16_t _TRACE_SPARC64_CPU_TICK_SET_LIMIT_ZERO_DSTATE;
#define TRACE_EBUS_ISA_IRQ_HANDLER_ENABLED 1
#define TRACE_SUN4U_IOMMU_MEM_READ_ENABLED 1
#define TRACE_SUN4U_IOMMU_MEM_WRITE_ENABLED 1
#define TRACE_SUN4U_IOMMU_TRANSLATE_ENABLED 1
#define TRACE_SPARC64_CPU_CHECK_IRQS_RESET_IRQ_ENABLED 1
#define TRACE_SPARC64_CPU_CHECK_IRQS_NOSET_IRQ_ENABLED 1
#define TRACE_SPARC64_CPU_CHECK_IRQS_SET_IRQ_ENABLED 1
#define TRACE_SPARC64_CPU_CHECK_IRQS_DISABLED_ENABLED 1
#define TRACE_SPARC64_CPU_IVEC_RAISE_IRQ_ENABLED 1
#define TRACE_SPARC64_CPU_IVEC_LOWER_IRQ_ENABLED 1
#define TRACE_SPARC64_CPU_TICK_IRQ_DISABLED_ENABLED 1
#define TRACE_SPARC64_CPU_TICK_IRQ_FIRE_ENABLED 1
#define TRACE_SPARC64_CPU_STICK_IRQ_DISABLED_ENABLED 1
#define TRACE_SPARC64_CPU_STICK_IRQ_FIRE_ENABLED 1
#define TRACE_SPARC64_CPU_HSTICK_IRQ_DISABLED_ENABLED 1
#define TRACE_SPARC64_CPU_HSTICK_IRQ_FIRE_ENABLED 1
#define TRACE_SPARC64_CPU_TICK_SET_COUNT_ENABLED 1
#define TRACE_SPARC64_CPU_TICK_GET_COUNT_ENABLED 1
#define TRACE_SPARC64_CPU_TICK_SET_LIMIT_ENABLED 1
#define TRACE_SPARC64_CPU_TICK_SET_LIMIT_ZERO_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_EBUS_ISA_IRQ_HANDLER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_EBUS_ISA_IRQ_HANDLER) || \
    false)

static inline void _nocheck__trace_ebus_isa_irq_handler(int n, int level)
{
    if (trace_event_get_state(TRACE_EBUS_ISA_IRQ_HANDLER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("%d@%zu.%06zu:ebus_isa_irq_handler " "Set ISA IRQ %d level %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , n, level);
#line 88 "trace/trace-hw_sparc64.h"
        } else {
#line 4 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("ebus_isa_irq_handler " "Set ISA IRQ %d level %d" "\n", n, level);
#line 92 "trace/trace-hw_sparc64.h"
        }
    }
}

static inline void trace_ebus_isa_irq_handler(int n, int level)
{
    if (true) {
        _nocheck__trace_ebus_isa_irq_handler(n, level);
    }
}

#define TRACE_SUN4U_IOMMU_MEM_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SUN4U_IOMMU_MEM_READ) || \
    false)

static inline void _nocheck__trace_sun4u_iommu_mem_read(uint64_t addr, uint64_t val, int size)
{
    if (trace_event_get_state(TRACE_SUN4U_IOMMU_MEM_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("%d@%zu.%06zu:sun4u_iommu_mem_read " "addr: 0x%"PRIx64" val: 0x%"PRIx64" size: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val, size);
#line 119 "trace/trace-hw_sparc64.h"
        } else {
#line 7 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("sun4u_iommu_mem_read " "addr: 0x%"PRIx64" val: 0x%"PRIx64" size: %d" "\n", addr, val, size);
#line 123 "trace/trace-hw_sparc64.h"
        }
    }
}

static inline void trace_sun4u_iommu_mem_read(uint64_t addr, uint64_t val, int size)
{
    if (true) {
        _nocheck__trace_sun4u_iommu_mem_read(addr, val, size);
    }
}

#define TRACE_SUN4U_IOMMU_MEM_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SUN4U_IOMMU_MEM_WRITE) || \
    false)

static inline void _nocheck__trace_sun4u_iommu_mem_write(uint64_t addr, uint64_t val, int size)
{
    if (trace_event_get_state(TRACE_SUN4U_IOMMU_MEM_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 8 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("%d@%zu.%06zu:sun4u_iommu_mem_write " "addr: 0x%"PRIx64" val: 0x%"PRIx64" size: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val, size);
#line 150 "trace/trace-hw_sparc64.h"
        } else {
#line 8 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("sun4u_iommu_mem_write " "addr: 0x%"PRIx64" val: 0x%"PRIx64" size: %d" "\n", addr, val, size);
#line 154 "trace/trace-hw_sparc64.h"
        }
    }
}

static inline void trace_sun4u_iommu_mem_write(uint64_t addr, uint64_t val, int size)
{
    if (true) {
        _nocheck__trace_sun4u_iommu_mem_write(addr, val, size);
    }
}

#define TRACE_SUN4U_IOMMU_TRANSLATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SUN4U_IOMMU_TRANSLATE) || \
    false)

static inline void _nocheck__trace_sun4u_iommu_translate(uint64_t addr, uint64_t trans_addr, uint64_t tte)
{
    if (trace_event_get_state(TRACE_SUN4U_IOMMU_TRANSLATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 9 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("%d@%zu.%06zu:sun4u_iommu_translate " "xlate 0x%"PRIx64" => pa 0x%"PRIx64" tte: 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, trans_addr, tte);
#line 181 "trace/trace-hw_sparc64.h"
        } else {
#line 9 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("sun4u_iommu_translate " "xlate 0x%"PRIx64" => pa 0x%"PRIx64" tte: 0x%"PRIx64 "\n", addr, trans_addr, tte);
#line 185 "trace/trace-hw_sparc64.h"
        }
    }
}

static inline void trace_sun4u_iommu_translate(uint64_t addr, uint64_t trans_addr, uint64_t tte)
{
    if (true) {
        _nocheck__trace_sun4u_iommu_translate(addr, trans_addr, tte);
    }
}

#define TRACE_SPARC64_CPU_CHECK_IRQS_RESET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPARC64_CPU_CHECK_IRQS_RESET_IRQ) || \
    false)

static inline void _nocheck__trace_sparc64_cpu_check_irqs_reset_irq(int intno)
{
    if (trace_event_get_state(TRACE_SPARC64_CPU_CHECK_IRQS_RESET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("%d@%zu.%06zu:sparc64_cpu_check_irqs_reset_irq " "Reset CPU IRQ (current interrupt 0x%x)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , intno);
#line 212 "trace/trace-hw_sparc64.h"
        } else {
#line 12 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("sparc64_cpu_check_irqs_reset_irq " "Reset CPU IRQ (current interrupt 0x%x)" "\n", intno);
#line 216 "trace/trace-hw_sparc64.h"
        }
    }
}

static inline void trace_sparc64_cpu_check_irqs_reset_irq(int intno)
{
    if (true) {
        _nocheck__trace_sparc64_cpu_check_irqs_reset_irq(intno);
    }
}

#define TRACE_SPARC64_CPU_CHECK_IRQS_NOSET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPARC64_CPU_CHECK_IRQS_NOSET_IRQ) || \
    false)

static inline void _nocheck__trace_sparc64_cpu_check_irqs_noset_irq(uint32_t tl, uint32_t tt, int intno)
{
    if (trace_event_get_state(TRACE_SPARC64_CPU_CHECK_IRQS_NOSET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 13 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("%d@%zu.%06zu:sparc64_cpu_check_irqs_noset_irq " "Not setting CPU IRQ: TL=%d current 0x%x >= pending 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tl, tt, intno);
#line 243 "trace/trace-hw_sparc64.h"
        } else {
#line 13 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("sparc64_cpu_check_irqs_noset_irq " "Not setting CPU IRQ: TL=%d current 0x%x >= pending 0x%x" "\n", tl, tt, intno);
#line 247 "trace/trace-hw_sparc64.h"
        }
    }
}

static inline void trace_sparc64_cpu_check_irqs_noset_irq(uint32_t tl, uint32_t tt, int intno)
{
    if (true) {
        _nocheck__trace_sparc64_cpu_check_irqs_noset_irq(tl, tt, intno);
    }
}

#define TRACE_SPARC64_CPU_CHECK_IRQS_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPARC64_CPU_CHECK_IRQS_SET_IRQ) || \
    false)

static inline void _nocheck__trace_sparc64_cpu_check_irqs_set_irq(unsigned int i, int old, int new)
{
    if (trace_event_get_state(TRACE_SPARC64_CPU_CHECK_IRQS_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 14 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("%d@%zu.%06zu:sparc64_cpu_check_irqs_set_irq " "Set CPU IRQ %d old=0x%x new=0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , i, old, new);
#line 274 "trace/trace-hw_sparc64.h"
        } else {
#line 14 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("sparc64_cpu_check_irqs_set_irq " "Set CPU IRQ %d old=0x%x new=0x%x" "\n", i, old, new);
#line 278 "trace/trace-hw_sparc64.h"
        }
    }
}

static inline void trace_sparc64_cpu_check_irqs_set_irq(unsigned int i, int old, int new)
{
    if (true) {
        _nocheck__trace_sparc64_cpu_check_irqs_set_irq(i, old, new);
    }
}

#define TRACE_SPARC64_CPU_CHECK_IRQS_DISABLED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPARC64_CPU_CHECK_IRQS_DISABLED) || \
    false)

static inline void _nocheck__trace_sparc64_cpu_check_irqs_disabled(uint32_t pil, uint32_t pil_in, uint32_t softint, int intno)
{
    if (trace_event_get_state(TRACE_SPARC64_CPU_CHECK_IRQS_DISABLED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 15 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("%d@%zu.%06zu:sparc64_cpu_check_irqs_disabled " "Interrupts disabled, pil=0x%08x pil_in=0x%08x softint=0x%08x current interrupt 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , pil, pil_in, softint, intno);
#line 305 "trace/trace-hw_sparc64.h"
        } else {
#line 15 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("sparc64_cpu_check_irqs_disabled " "Interrupts disabled, pil=0x%08x pil_in=0x%08x softint=0x%08x current interrupt 0x%x" "\n", pil, pil_in, softint, intno);
#line 309 "trace/trace-hw_sparc64.h"
        }
    }
}

static inline void trace_sparc64_cpu_check_irqs_disabled(uint32_t pil, uint32_t pil_in, uint32_t softint, int intno)
{
    if (true) {
        _nocheck__trace_sparc64_cpu_check_irqs_disabled(pil, pil_in, softint, intno);
    }
}

#define TRACE_SPARC64_CPU_IVEC_RAISE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPARC64_CPU_IVEC_RAISE_IRQ) || \
    false)

static inline void _nocheck__trace_sparc64_cpu_ivec_raise_irq(int irq)
{
    if (trace_event_get_state(TRACE_SPARC64_CPU_IVEC_RAISE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("%d@%zu.%06zu:sparc64_cpu_ivec_raise_irq " "Raise IVEC IRQ %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq);
#line 336 "trace/trace-hw_sparc64.h"
        } else {
#line 16 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("sparc64_cpu_ivec_raise_irq " "Raise IVEC IRQ %d" "\n", irq);
#line 340 "trace/trace-hw_sparc64.h"
        }
    }
}

static inline void trace_sparc64_cpu_ivec_raise_irq(int irq)
{
    if (true) {
        _nocheck__trace_sparc64_cpu_ivec_raise_irq(irq);
    }
}

#define TRACE_SPARC64_CPU_IVEC_LOWER_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPARC64_CPU_IVEC_LOWER_IRQ) || \
    false)

static inline void _nocheck__trace_sparc64_cpu_ivec_lower_irq(int irq)
{
    if (trace_event_get_state(TRACE_SPARC64_CPU_IVEC_LOWER_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 17 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("%d@%zu.%06zu:sparc64_cpu_ivec_lower_irq " "Lower IVEC IRQ %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq);
#line 367 "trace/trace-hw_sparc64.h"
        } else {
#line 17 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("sparc64_cpu_ivec_lower_irq " "Lower IVEC IRQ %d" "\n", irq);
#line 371 "trace/trace-hw_sparc64.h"
        }
    }
}

static inline void trace_sparc64_cpu_ivec_lower_irq(int irq)
{
    if (true) {
        _nocheck__trace_sparc64_cpu_ivec_lower_irq(irq);
    }
}

#define TRACE_SPARC64_CPU_TICK_IRQ_DISABLED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPARC64_CPU_TICK_IRQ_DISABLED) || \
    false)

static inline void _nocheck__trace_sparc64_cpu_tick_irq_disabled(void)
{
    if (trace_event_get_state(TRACE_SPARC64_CPU_TICK_IRQ_DISABLED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 18 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("%d@%zu.%06zu:sparc64_cpu_tick_irq_disabled " "tick_irq: softint disabled" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 398 "trace/trace-hw_sparc64.h"
        } else {
#line 18 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("sparc64_cpu_tick_irq_disabled " "tick_irq: softint disabled" "\n");
#line 402 "trace/trace-hw_sparc64.h"
        }
    }
}

static inline void trace_sparc64_cpu_tick_irq_disabled(void)
{
    if (true) {
        _nocheck__trace_sparc64_cpu_tick_irq_disabled();
    }
}

#define TRACE_SPARC64_CPU_TICK_IRQ_FIRE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPARC64_CPU_TICK_IRQ_FIRE) || \
    false)

static inline void _nocheck__trace_sparc64_cpu_tick_irq_fire(void)
{
    if (trace_event_get_state(TRACE_SPARC64_CPU_TICK_IRQ_FIRE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 19 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("%d@%zu.%06zu:sparc64_cpu_tick_irq_fire " "tick_irq: fire" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 429 "trace/trace-hw_sparc64.h"
        } else {
#line 19 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("sparc64_cpu_tick_irq_fire " "tick_irq: fire" "\n");
#line 433 "trace/trace-hw_sparc64.h"
        }
    }
}

static inline void trace_sparc64_cpu_tick_irq_fire(void)
{
    if (true) {
        _nocheck__trace_sparc64_cpu_tick_irq_fire();
    }
}

#define TRACE_SPARC64_CPU_STICK_IRQ_DISABLED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPARC64_CPU_STICK_IRQ_DISABLED) || \
    false)

static inline void _nocheck__trace_sparc64_cpu_stick_irq_disabled(void)
{
    if (trace_event_get_state(TRACE_SPARC64_CPU_STICK_IRQ_DISABLED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 20 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("%d@%zu.%06zu:sparc64_cpu_stick_irq_disabled " "stick_irq: softint disabled" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 460 "trace/trace-hw_sparc64.h"
        } else {
#line 20 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("sparc64_cpu_stick_irq_disabled " "stick_irq: softint disabled" "\n");
#line 464 "trace/trace-hw_sparc64.h"
        }
    }
}

static inline void trace_sparc64_cpu_stick_irq_disabled(void)
{
    if (true) {
        _nocheck__trace_sparc64_cpu_stick_irq_disabled();
    }
}

#define TRACE_SPARC64_CPU_STICK_IRQ_FIRE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPARC64_CPU_STICK_IRQ_FIRE) || \
    false)

static inline void _nocheck__trace_sparc64_cpu_stick_irq_fire(void)
{
    if (trace_event_get_state(TRACE_SPARC64_CPU_STICK_IRQ_FIRE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 21 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("%d@%zu.%06zu:sparc64_cpu_stick_irq_fire " "stick_irq: fire" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 491 "trace/trace-hw_sparc64.h"
        } else {
#line 21 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("sparc64_cpu_stick_irq_fire " "stick_irq: fire" "\n");
#line 495 "trace/trace-hw_sparc64.h"
        }
    }
}

static inline void trace_sparc64_cpu_stick_irq_fire(void)
{
    if (true) {
        _nocheck__trace_sparc64_cpu_stick_irq_fire();
    }
}

#define TRACE_SPARC64_CPU_HSTICK_IRQ_DISABLED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPARC64_CPU_HSTICK_IRQ_DISABLED) || \
    false)

static inline void _nocheck__trace_sparc64_cpu_hstick_irq_disabled(void)
{
    if (trace_event_get_state(TRACE_SPARC64_CPU_HSTICK_IRQ_DISABLED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 22 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("%d@%zu.%06zu:sparc64_cpu_hstick_irq_disabled " "hstick_irq: softint disabled" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 522 "trace/trace-hw_sparc64.h"
        } else {
#line 22 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("sparc64_cpu_hstick_irq_disabled " "hstick_irq: softint disabled" "\n");
#line 526 "trace/trace-hw_sparc64.h"
        }
    }
}

static inline void trace_sparc64_cpu_hstick_irq_disabled(void)
{
    if (true) {
        _nocheck__trace_sparc64_cpu_hstick_irq_disabled();
    }
}

#define TRACE_SPARC64_CPU_HSTICK_IRQ_FIRE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPARC64_CPU_HSTICK_IRQ_FIRE) || \
    false)

static inline void _nocheck__trace_sparc64_cpu_hstick_irq_fire(void)
{
    if (trace_event_get_state(TRACE_SPARC64_CPU_HSTICK_IRQ_FIRE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 23 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("%d@%zu.%06zu:sparc64_cpu_hstick_irq_fire " "hstick_irq: fire" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 553 "trace/trace-hw_sparc64.h"
        } else {
#line 23 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("sparc64_cpu_hstick_irq_fire " "hstick_irq: fire" "\n");
#line 557 "trace/trace-hw_sparc64.h"
        }
    }
}

static inline void trace_sparc64_cpu_hstick_irq_fire(void)
{
    if (true) {
        _nocheck__trace_sparc64_cpu_hstick_irq_fire();
    }
}

#define TRACE_SPARC64_CPU_TICK_SET_COUNT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPARC64_CPU_TICK_SET_COUNT) || \
    false)

static inline void _nocheck__trace_sparc64_cpu_tick_set_count(const char * name, uint64_t real_count, const char * npt, void * p)
{
    if (trace_event_get_state(TRACE_SPARC64_CPU_TICK_SET_COUNT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 24 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("%d@%zu.%06zu:sparc64_cpu_tick_set_count " "%s set_count count=0x%"PRIx64" (npt %s) p=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, real_count, npt, p);
#line 584 "trace/trace-hw_sparc64.h"
        } else {
#line 24 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("sparc64_cpu_tick_set_count " "%s set_count count=0x%"PRIx64" (npt %s) p=%p" "\n", name, real_count, npt, p);
#line 588 "trace/trace-hw_sparc64.h"
        }
    }
}

static inline void trace_sparc64_cpu_tick_set_count(const char * name, uint64_t real_count, const char * npt, void * p)
{
    if (true) {
        _nocheck__trace_sparc64_cpu_tick_set_count(name, real_count, npt, p);
    }
}

#define TRACE_SPARC64_CPU_TICK_GET_COUNT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPARC64_CPU_TICK_GET_COUNT) || \
    false)

static inline void _nocheck__trace_sparc64_cpu_tick_get_count(const char * name, uint64_t real_count, const char * npt, void * p)
{
    if (trace_event_get_state(TRACE_SPARC64_CPU_TICK_GET_COUNT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 25 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("%d@%zu.%06zu:sparc64_cpu_tick_get_count " "%s get_count count=0x%"PRIx64" (npt %s) p=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, real_count, npt, p);
#line 615 "trace/trace-hw_sparc64.h"
        } else {
#line 25 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("sparc64_cpu_tick_get_count " "%s get_count count=0x%"PRIx64" (npt %s) p=%p" "\n", name, real_count, npt, p);
#line 619 "trace/trace-hw_sparc64.h"
        }
    }
}

static inline void trace_sparc64_cpu_tick_get_count(const char * name, uint64_t real_count, const char * npt, void * p)
{
    if (true) {
        _nocheck__trace_sparc64_cpu_tick_get_count(name, real_count, npt, p);
    }
}

#define TRACE_SPARC64_CPU_TICK_SET_LIMIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPARC64_CPU_TICK_SET_LIMIT) || \
    false)

static inline void _nocheck__trace_sparc64_cpu_tick_set_limit(const char * name, uint64_t real_limit, const char * dis, void * p, uint64_t limit, uint64_t t, uint64_t dt)
{
    if (trace_event_get_state(TRACE_SPARC64_CPU_TICK_SET_LIMIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 26 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("%d@%zu.%06zu:sparc64_cpu_tick_set_limit " "%s set_limit limit=0x%"PRIx64 " (%s) p=%p called with limit=0x%"PRIx64" at 0x%"PRIx64" (delta=0x%"PRIx64")" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, real_limit, dis, p, limit, t, dt);
#line 646 "trace/trace-hw_sparc64.h"
        } else {
#line 26 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("sparc64_cpu_tick_set_limit " "%s set_limit limit=0x%"PRIx64 " (%s) p=%p called with limit=0x%"PRIx64" at 0x%"PRIx64" (delta=0x%"PRIx64")" "\n", name, real_limit, dis, p, limit, t, dt);
#line 650 "trace/trace-hw_sparc64.h"
        }
    }
}

static inline void trace_sparc64_cpu_tick_set_limit(const char * name, uint64_t real_limit, const char * dis, void * p, uint64_t limit, uint64_t t, uint64_t dt)
{
    if (true) {
        _nocheck__trace_sparc64_cpu_tick_set_limit(name, real_limit, dis, p, limit, t, dt);
    }
}

#define TRACE_SPARC64_CPU_TICK_SET_LIMIT_ZERO_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPARC64_CPU_TICK_SET_LIMIT_ZERO) || \
    false)

static inline void _nocheck__trace_sparc64_cpu_tick_set_limit_zero(const char * name)
{
    if (trace_event_get_state(TRACE_SPARC64_CPU_TICK_SET_LIMIT_ZERO) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 27 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("%d@%zu.%06zu:sparc64_cpu_tick_set_limit_zero " "%s set_limit limit=ZERO - not starting timer" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name);
#line 677 "trace/trace-hw_sparc64.h"
        } else {
#line 27 "/home/lore/MasterThesis/qemu/hw/sparc64/trace-events"
            qemu_log("sparc64_cpu_tick_set_limit_zero " "%s set_limit limit=ZERO - not starting timer" "\n", name);
#line 681 "trace/trace-hw_sparc64.h"
        }
    }
}

static inline void trace_sparc64_cpu_tick_set_limit_zero(const char * name)
{
    if (true) {
        _nocheck__trace_sparc64_cpu_tick_set_limit_zero(name);
    }
}
#endif /* TRACE_HW_SPARC64_GENERATED_TRACERS_H */
